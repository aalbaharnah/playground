import { useFrame, useLoader } from "@react-three/fiber/native";
import { THREE } from "expo-three";
import { useLayoutEffect, useMemo, useRef, useState } from "react";
import { MTLLoader } from "three/examples/jsm/loaders/MTLLoader";
import { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';
import { TextureLoader } from "expo-three";
import { MaterialLoader, ObjectLoader } from "three";
import { useAnimatedSensor, SensorType, useSharedValue, withSpring, SharedValue } from 'react-native-reanimated';
import { useGLTF } from "@react-three/drei/native";

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/



import { GLTF } from "three/examples/jsm/loaders/GLTFLoader"

type GLTFResult = GLTF & {
    nodes: {
        character_bear: THREE.Mesh, character_bearArmLeft: THREE.Mesh, character_bearArmRight: THREE.Mesh, Cube1337: THREE.Mesh, Cube1337_1: THREE.Mesh

    }
    materials: {
        ['BrownDark.036']: THREE.MeshStandardMaterial, ['Black.025']: THREE.MeshStandardMaterial
    }
}


interface BearProps {
    scale: SharedValue<number>
    position: SharedValue<number>
    model: any
}

export default function Model(props: BearProps) {
    const ref = useRef<THREE.Mesh>(null);

    const { scene } = useGLTF(props.model) as unknown as GLTFResult;

    useFrame((state, delta) => {
        ref.current?.scale.set(props.scale.value, props.scale.value, props.scale.value)
        state.camera.position.x += (0 - state.camera.position.x) * 0.1;
        state.camera.position.y += (1 - state.camera.position.y) * 0.1;
        state.camera.lookAt(0, 0, 0);
        ref.current?.rotateY(delta * 0.5)

        ref.current?.position.setY(props.position.value)

    })


    return (
        <mesh ref={ref} scale={1} position={[0, 0, 0]}>
            <primitive object={scene} scale={1} />
        </mesh>
    )
}